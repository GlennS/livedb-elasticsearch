* LiveDB ElasticSearch
ElasticSearch adapter for [[https://github.com/share/livedb][LiveDB]].

Implements the collections and oplog APIs, but not the query API.

We make a single index in ElasticSearch. Snapshots and operations are stored as different /types/. Different 'collections' are distinguished by a =collection= field.

** Usage
#+BEGIN_SRC js2
  "use strict";

  /*global module, require*/

  var liveDBElasticFactory = require("livedb-elasticsearch"),
      liveDBElastic = liveDBElasticFactory(
          "http://localhost:9200", // The default ElasticSearch location
          "livedb", // Index to write documents into.
          // An options object
          {
              // The optional extraMappings property allows you to specify fields that you would like to be indexed.
              extraMappings: {
                  snapshotData: {
                      'some-property': {
                          type: 'string',
                          index: 'not-analyzed'
                      }
                  }
              }
          }
      ),

      liveDB = require("livedb").client(liveDBElastic);

  // From this point, follow the livedb documentation.
#+END_SRC

** Mappings
We provide 3 functions to modify mappings. Pass these a callback which expects (error, result):
 + ensureMappingsCreated
 + deleteMappings
 + deleteThenCreateMappings

*** Custom Mappings
By default, none of the fields inside a snapshot's data are indexed. They are available for retreival from inside the =_source= property.

When constructing livedb-elasticsearch, you may specify some extra mappings if there are fields you care about. In the options object, making an =extraMappings= property.

The =extraMappings= property should contain an object which itself has a =snapshotData= property. Properties inside that =snapshotData= object will become sub-properties of the snapshot type's =data= field in ElasticSearch. See [[https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-object-type.html][Mapping Object Types]].

** Deletions
Deletes in liveDB do not map to deletes in ElasticSearch. Instead, we insert a 'delete' operation for that document and replace its snapshot with a deleted marker.

** Versions
We use ElasticSearch versions for snapshots, so these get replaced.

We do not use ElasticSearch versions for ops, because we want to keep them around forever. Each op gets a unique id including its version number, and should never be updated or deleted.

** Dependencies
 + ElasticSearch v1.7.x
 + NodeJS
 + The npm files listed in package.json

** titleSearch
This is an extra function which is not part of the liveDB api.

Search for a snapshot in a collection based on the title field.

Takes parameters:
 + collection
 + searchTerm
 + callback

The callback will be called with (error, listOfHits).

** Tests
First install tap-spec, which prettifies the outputs =sudo npm install -g tap-spec=, then run =make tests=.
